// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef SUBSCRIPTION_MODEL_ODB_HXX
#define SUBSCRIPTION_MODEL_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <cstddef>
#include <memory>
#include <odb/callback.hxx>
#include <odb/container-traits.hxx>
#include <odb/core.hxx>
#include <odb/details/shared-ptr.hxx>
#include <odb/details/unused.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/pre.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/traits.hxx>
#include <odb/wrapper-traits.hxx>
#include <utility>

#include "car-model-odb.hxx"
#include "card-model-odb.hxx"
#include "contact-model-odb.hxx"
#include "create-modify-delete-model-odb.hxx"
#include "driver-model-odb.hxx"
#include "model/database/subscription-model.hpp"
#include "organization-model-odb.hxx"
#include "person-model-odb.hxx"
#include "user-model-odb.hxx"

namespace odb
{
  // SubscriptionModel
  //
  template <>
  struct class_traits< ::anar::parspark::model::SubscriptionModel >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::anar::parspark::model::SubscriptionModel >
  {
    public:
    typedef ::anar::parspark::model::SubscriptionModel object_type;
    typedef ::std::shared_ptr< ::anar::parspark::model::SubscriptionModel > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // SubscriptionModel
  //
  template <typename A>
  struct pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >:
    pointer_query_columns< ::anar::parspark::model::CreateModifyDeleteModel, id_mysql, A >
  {
    // CreateModifyDeleteModel
    //
    typedef pointer_query_columns< ::anar::parspark::model::CreateModifyDeleteModel, id_mysql, A > CreateModifyDeleteModel;

    // Id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Id_type_;

    static const Id_type_ Id;

    // Card
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Card_type_;

    static const Card_type_ Card;

    // ValidateTimesJson
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    ValidateTimesJson_type_;

    static const ValidateTimesJson_type_ ValidateTimesJson;

    // subscription_cost
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint32_t,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    subscription_cost_type_;

    static const subscription_cost_type_ subscription_cost;

    // Car
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Car_type_;

    static const Car_type_ Car;

    // Driver
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Driver_type_;

    static const Driver_type_ Driver;

    // Organization
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Organization_type_;

    static const Organization_type_ Organization;
  };

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::Id_type_
  pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  Id (A::table_name, "`id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::Card_type_
  pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  Card (A::table_name, "`card_id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::ValidateTimesJson_type_
  pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  ValidateTimesJson (A::table_name, "`validate_times_json`", 0);

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::subscription_cost_type_
  pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  subscription_cost (A::table_name, "`subscription_cost`", 0);

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::Car_type_
  pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  Car (A::table_name, "`car_id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::Driver_type_
  pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  Driver (A::table_name, "`driver_id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::Organization_type_
  pointer_query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  Organization (A::table_name, "`organization_id`", 0);

  template <>
  class access::object_traits_impl< ::anar::parspark::model::SubscriptionModel, id_mysql >:
    public access::object_traits< ::anar::parspark::model::SubscriptionModel >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type: object_traits_impl< ::anar::parspark::model::CreateModifyDeleteModel, id_mysql >::image_type
    {
      // Id
      //
      unsigned long long Id_value;
      my_bool Id_null;

      // Card
      //
      unsigned long long Card_value;
      my_bool Card_null;

      // ValidateTimesJson
      //
      details::buffer ValidateTimesJson_value;
      unsigned long ValidateTimesJson_size;
      my_bool ValidateTimesJson_null;

      // subscription_cost
      //
      unsigned int subscription_cost_value;
      my_bool subscription_cost_null;

      // Car
      //
      unsigned long long Car_value;
      my_bool Car_null;

      // Driver
      //
      unsigned long long Driver_value;
      my_bool Driver_null;

      // Organization
      //
      unsigned long long Organization_value;
      my_bool Organization_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct Card_tag;
    struct Car_tag;
    struct Driver_tag;
    struct Organization_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 11UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::anar::parspark::model::SubscriptionModel, id_common >:
    public access::object_traits_impl< ::anar::parspark::model::SubscriptionModel, id_mysql >
  {
  };

  // SubscriptionModel
  //
  template <>
  struct alias_traits<
    ::anar::parspark::model::CardModel,
    id_mysql,
    access::object_traits_impl< ::anar::parspark::model::SubscriptionModel, id_mysql >::Card_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::anar::parspark::model::CarModel,
    id_mysql,
    access::object_traits_impl< ::anar::parspark::model::SubscriptionModel, id_mysql >::Car_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::anar::parspark::model::DriverModel,
    id_mysql,
    access::object_traits_impl< ::anar::parspark::model::SubscriptionModel, id_mysql >::Driver_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::anar::parspark::model::OrganizationModel,
    id_mysql,
    access::object_traits_impl< ::anar::parspark::model::SubscriptionModel, id_mysql >::Organization_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::anar::parspark::model::SubscriptionModel, id_mysql >
  {
    // Card
    //
    typedef
    odb::alias_traits<
      ::anar::parspark::model::CardModel,
      id_mysql,
      access::object_traits_impl< ::anar::parspark::model::SubscriptionModel, id_mysql >::Card_tag>
    Card_alias_;

    // Car
    //
    typedef
    odb::alias_traits<
      ::anar::parspark::model::CarModel,
      id_mysql,
      access::object_traits_impl< ::anar::parspark::model::SubscriptionModel, id_mysql >::Car_tag>
    Car_alias_;

    // Driver
    //
    typedef
    odb::alias_traits<
      ::anar::parspark::model::DriverModel,
      id_mysql,
      access::object_traits_impl< ::anar::parspark::model::SubscriptionModel, id_mysql >::Driver_tag>
    Driver_alias_;

    // Organization
    //
    typedef
    odb::alias_traits<
      ::anar::parspark::model::OrganizationModel,
      id_mysql,
      access::object_traits_impl< ::anar::parspark::model::SubscriptionModel, id_mysql >::Organization_tag>
    Organization_alias_;
  };

  template <typename A>
  struct query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >:
    query_columns_base< ::anar::parspark::model::SubscriptionModel, id_mysql >,
    query_columns< ::anar::parspark::model::CreateModifyDeleteModel, id_mysql, A >
  {
    // CreateModifyDeleteModel
    //
    typedef query_columns< ::anar::parspark::model::CreateModifyDeleteModel, id_mysql, A > CreateModifyDeleteModel;

    // Id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Id_type_;

    static const Id_type_ Id;

    // Card
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Card_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::anar::parspark::model::CardModel,
        id_mysql,
        Card_alias_ > >
    Card_pointer_type_;

    struct Card_type_: Card_pointer_type_, Card_column_type_
    {
      Card_type_ (const char* t, const char* c, const char* conv)
        : Card_column_type_ (t, c, conv)
      {
      }
    };

    static const Card_type_ Card;

    // ValidateTimesJson
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    ValidateTimesJson_type_;

    static const ValidateTimesJson_type_ ValidateTimesJson;

    // subscription_cost
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint32_t,
        mysql::id_ulong >::query_type,
      mysql::id_ulong >
    subscription_cost_type_;

    static const subscription_cost_type_ subscription_cost;

    // Car
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Car_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::anar::parspark::model::CarModel,
        id_mysql,
        Car_alias_ > >
    Car_pointer_type_;

    struct Car_type_: Car_pointer_type_, Car_column_type_
    {
      Car_type_ (const char* t, const char* c, const char* conv)
        : Car_column_type_ (t, c, conv)
      {
      }
    };

    static const Car_type_ Car;

    // Driver
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Driver_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::anar::parspark::model::DriverModel,
        id_mysql,
        Driver_alias_ > >
    Driver_pointer_type_;

    struct Driver_type_: Driver_pointer_type_, Driver_column_type_
    {
      Driver_type_ (const char* t, const char* c, const char* conv)
        : Driver_column_type_ (t, c, conv)
      {
      }
    };

    static const Driver_type_ Driver;

    // Organization
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Organization_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::anar::parspark::model::OrganizationModel,
        id_mysql,
        Organization_alias_ > >
    Organization_pointer_type_;

    struct Organization_type_: Organization_pointer_type_, Organization_column_type_
    {
      Organization_type_ (const char* t, const char* c, const char* conv)
        : Organization_column_type_ (t, c, conv)
      {
      }
    };

    static const Organization_type_ Organization;
  };

  template <typename A>
  const typename query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::Id_type_
  query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  Id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::Card_type_
  query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  Card (A::table_name, "`card_id`", 0);

  template <typename A>
  const typename query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::ValidateTimesJson_type_
  query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  ValidateTimesJson (A::table_name, "`validate_times_json`", 0);

  template <typename A>
  const typename query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::subscription_cost_type_
  query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  subscription_cost (A::table_name, "`subscription_cost`", 0);

  template <typename A>
  const typename query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::Car_type_
  query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  Car (A::table_name, "`car_id`", 0);

  template <typename A>
  const typename query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::Driver_type_
  query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  Driver (A::table_name, "`driver_id`", 0);

  template <typename A>
  const typename query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::Organization_type_
  query_columns< ::anar::parspark::model::SubscriptionModel, id_mysql, A >::
  Organization (A::table_name, "`organization_id`", 0);
}

#include "subscription-model-odb.ixx"

#include <odb/post.hxx>

#endif // SUBSCRIPTION_MODEL_ODB_HXX
