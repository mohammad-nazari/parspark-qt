// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef USER_MODEL_ODB_HXX
#define USER_MODEL_ODB_HXX

// Begin prologue.
//
#include "service/model-binding/database/traits/traits.hxx"
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "user-model.hpp"

#include "person-model-odb.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // UserModel
  //
  template <>
  struct class_traits< ::anar::parspark::model::UserModel >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::anar::parspark::model::UserModel >
  {
    public:
    typedef ::anar::parspark::model::UserModel object_type;
    typedef ::std::shared_ptr< ::anar::parspark::model::UserModel > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::uint64_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // UserModel
  //
  template <typename A>
  struct pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >
  {
    // Id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Id_type_;

    static const Id_type_ Id;

    // UserName
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    UserName_type_;

    static const UserName_type_ UserName;

    // PassWord
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    PassWord_type_;

    static const PassWord_type_ PassWord;

    // Person
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Person_type_;

    static const Person_type_ Person;

    // Type
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::anar::parspark::model::UserType,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    Type_type_;

    static const Type_type_ Type;

    // CreatedTime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::time_t,
        mysql::id_timestamp >::query_type,
      mysql::id_timestamp >
    CreatedTime_type_;

    static const CreatedTime_type_ CreatedTime;

    // UpdatedTime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long int,
        mysql::id_timestamp >::query_type,
      mysql::id_timestamp >
    UpdatedTime_type_;

    static const UpdatedTime_type_ UpdatedTime;
  };

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::Id_type_
  pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  Id (A::table_name, "`id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::UserName_type_
  pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  UserName (A::table_name, "`user_name`", 0);

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::PassWord_type_
  pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  PassWord (A::table_name, "`pass_word`", 0);

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::Person_type_
  pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  Person (A::table_name, "`person_id`", 0);

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::Type_type_
  pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  Type (A::table_name, "`type`", 0);

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::CreatedTime_type_
  pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  CreatedTime (A::table_name, "`created_time`", 0);

  template <typename A>
  const typename pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::UpdatedTime_type_
  pointer_query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  UpdatedTime (A::table_name, "`updated_time`", 0);

  template <>
  class access::object_traits_impl< ::anar::parspark::model::UserModel, id_mysql >:
    public access::object_traits< ::anar::parspark::model::UserModel >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // Id
      //
      unsigned long long Id_value;
      my_bool Id_null;

      // UserName
      //
      details::buffer UserName_value;
      unsigned long UserName_size;
      my_bool UserName_null;

      // PassWord
      //
      details::buffer PassWord_value;
      unsigned long PassWord_size;
      my_bool PassWord_null;

      // Person
      //
      unsigned long long Person_value;
      my_bool Person_null;

      // Type
      //
      mysql::value_traits< ::anar::parspark::model::UserType, mysql::id_enum >::image_type Type_value;
      unsigned long Type_size;
      my_bool Type_null;

      // CreatedTime
      //
      MYSQL_TIME CreatedTime_value;
      my_bool CreatedTime_null;

      // UpdatedTime
      //
      MYSQL_TIME UpdatedTime_value;
      my_bool UpdatedTime_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct Person_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::anar::parspark::model::UserModel, id_common >:
    public access::object_traits_impl< ::anar::parspark::model::UserModel, id_mysql >
  {
  };

  // UserModel
  //
  template <>
  struct alias_traits<
    ::anar::parspark::model::PersonModel,
    id_mysql,
    access::object_traits_impl< ::anar::parspark::model::UserModel, id_mysql >::Person_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::anar::parspark::model::UserModel, id_mysql >
  {
    // Person
    //
    typedef
    odb::alias_traits<
      ::anar::parspark::model::PersonModel,
      id_mysql,
      access::object_traits_impl< ::anar::parspark::model::UserModel, id_mysql >::Person_tag>
    Person_alias_;
  };

  template <typename A>
  struct query_columns< ::anar::parspark::model::UserModel, id_mysql, A >:
    query_columns_base< ::anar::parspark::model::UserModel, id_mysql >
  {
    // Id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Id_type_;

    static const Id_type_ Id;

    // UserName
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    UserName_type_;

    static const UserName_type_ UserName;

    // PassWord
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    PassWord_type_;

    static const PassWord_type_ PassWord;

    // Person
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::uint64_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    Person_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::anar::parspark::model::PersonModel,
        id_mysql,
        Person_alias_ > >
    Person_pointer_type_;

    struct Person_type_: Person_pointer_type_, Person_column_type_
    {
      Person_type_ (const char* t, const char* c, const char* conv)
        : Person_column_type_ (t, c, conv)
      {
      }
    };

    static const Person_type_ Person;

    // Type
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::anar::parspark::model::UserType,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    Type_type_;

    static const Type_type_ Type;

    // CreatedTime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::time_t,
        mysql::id_timestamp >::query_type,
      mysql::id_timestamp >
    CreatedTime_type_;

    static const CreatedTime_type_ CreatedTime;

    // UpdatedTime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long int,
        mysql::id_timestamp >::query_type,
      mysql::id_timestamp >
    UpdatedTime_type_;

    static const UpdatedTime_type_ UpdatedTime;
  };

  template <typename A>
  const typename query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::Id_type_
  query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  Id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::UserName_type_
  query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  UserName (A::table_name, "`user_name`", 0);

  template <typename A>
  const typename query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::PassWord_type_
  query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  PassWord (A::table_name, "`pass_word`", 0);

  template <typename A>
  const typename query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::Person_type_
  query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  Person (A::table_name, "`person_id`", 0);

  template <typename A>
  const typename query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::Type_type_
  query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  Type (A::table_name, "`type`", 0);

  template <typename A>
  const typename query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::CreatedTime_type_
  query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  CreatedTime (A::table_name, "`created_time`", 0);

  template <typename A>
  const typename query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::UpdatedTime_type_
  query_columns< ::anar::parspark::model::UserModel, id_mysql, A >::
  UpdatedTime (A::table_name, "`updated_time`", 0);
}

#include "user-model-odb.ixx"

#include <odb/post.hxx>

#endif // USER_MODEL_ODB_HXX
